
class UnionFind():
    def __init__(self, n):
        self.parent = list(range(n))
        self.num = n #连通量

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self,x ,y):
        parent_x, parent_y = self.find(x), self.find(y)
        if parent_x != parent_y:
            self.parent[parent_y] = parent_x
            self.num -= 1
            return False
        else:
            return True


    def isConnected(self, x, y):
        parent_x, parent_y = self.find(x), self.find(y)
        if parent_x != parent_y:
            return False
        else:
            return True


class Solution(object):
    def maxNumEdgesToRemove(self, n, edges):
        """
        :type n: int
        :type edges: List[List[int]]
        :rtype: int
        """
        edges = sorted(edges, key=lambda ele: ele[0], reverse=True)
        num = 0
        uf_alice = UnionFind(n + 1)
        uf_bob = UnionFind(n + 1)
        for ele in edges:
            if ele[0] == 3:
                flag = uf_alice.union(ele[1], ele[2])
                if flag:
                    num += 1
                else:
                    uf_bob.union(ele[1], ele[2])

            else:

                if ele[0] == 1:
                    flag = uf_alice.union(ele[1], ele[2])
                    if flag == True:
                        num += 1


                else: #2
                    flag = uf_alice.union(ele[1], ele[2])
                    if flag == True:
                        num += 1

        if uf_bob.num == 2 and uf_alice.num == 2:
            return



if __name__ == '__main__':
    n = 4
    edges = [[3, 1, 2], [3, 2, 3], [1, 1, 3], [1, 2, 4], [1, 1, 2], [2, 3, 4]]
    n = 4
    edges = [[3, 1, 2], [3, 2, 3], [1, 1, 4], [2, 1, 4]]

    n = 4
    edges = [[3, 2, 3], [1, 1, 2], [2, 3, 4]]

    n = 13
    edges = [[1, 1, 2], [2, 1, 3], [3, 2, 4], [3, 2, 5], [1, 2, 6], [3, 6, 7], [3, 7, 8], [3, 6, 9], [3, 4, 10], [2, 3, 11],
     [1, 5, 12], [3, 3, 13], [2, 1, 10], [2, 6, 11], [3, 5, 13], [1, 9, 12], [1, 6, 8], [3, 6, 13], [2, 1, 4],
     [1, 1, 13], [2, 9, 10], [2, 1, 6], [2, 10, 13], [2, 2, 9], [3, 4, 12], [2, 4, 7], [1, 1, 10], [1, 3, 7],
     [1, 7, 11], [3, 3, 12], [2, 4, 8], [3, 8, 9], [1, 9, 13], [2, 4, 10], [1, 6, 9], [3, 10, 13], [1, 7, 10],
     [1, 1, 11], [2, 4, 9], [3, 5, 11], [3, 2, 6], [2, 1, 5], [2, 5, 11], [2, 1, 7], [2, 3, 8], [2, 8, 9], [3, 4, 13],
     [3, 3, 8], [3, 3, 11], [2, 9, 11], [3, 1, 8], [2, 1, 8], [3, 8, 13], [2, 10, 11], [3, 1, 5], [1, 10, 11],
     [1, 7, 12], [2, 3, 5], [3, 1, 13], [2, 4, 11], [2, 3, 9], [2, 6, 9], [2, 1, 13], [3, 1, 12], [2, 7, 8], [2, 5, 6],
     [3, 1, 9], [1, 5, 10], [3, 2, 13], [2, 3, 6], [2, 2, 10], [3, 4, 11], [1, 4, 13], [3, 5, 10], [1, 4, 10],
     [1, 1, 8], [3, 3, 4], [2, 4, 6], [2, 7, 11], [2, 7, 10], [2, 3, 12], [3, 7, 11], [3, 9, 10], [2, 11, 13],
     [1, 1, 12], [2, 10, 12], [1, 7, 13], [1, 4, 11], [2, 4, 5], [1, 3, 10], [2, 12, 13], [3, 3, 10], [1, 6, 12],
     [3, 6, 10], [1, 3, 4], [2, 7, 9], [1, 3, 11], [2, 2, 8], [1, 2, 8], [1, 11, 13], [1, 2, 13], [2, 2, 6], [1, 4, 6],
     [1, 6, 11], [3, 1, 2], [1, 1, 3], [2, 11, 12], [3, 2, 11], [1, 9, 10], [2, 6, 12], [3, 1, 7], [1, 4, 9],
     [1, 10, 12], [2, 6, 13], [2, 2, 12], [2, 1, 11], [2, 5, 9], [1, 3, 8], [1, 7, 8], [1, 2, 12], [1, 5, 11],
     [2, 7, 12], [3, 1, 11], [3, 9, 12], [3, 2, 9], [3, 10, 11]]

    n = 12
    edges = [[3, 1, 2], [2, 2, 3], [3, 1, 4], [2, 3, 5], [1, 2, 6], [2, 4, 7], [3, 3, 8], [3, 2, 9], [2, 1, 10], [2, 1, 11],
     [1, 11, 12], [1, 10, 11], [2, 5, 9], [2, 7, 10], [2, 4, 12], [3, 9, 10], [1, 6, 9], [2, 10, 12], [1, 2, 5],
     [3, 5, 6], [1, 7, 11], [1, 8, 9], [1, 1, 11], [3, 4, 5], [1, 5, 9], [2, 4, 9], [1, 8, 11], [3, 6, 8], [1, 8, 10],
     [2, 2, 4], [2, 3, 8], [3, 2, 6], [3, 10, 11], [2, 3, 11], [3, 5, 9], [3, 3, 5], [2, 6, 11], [3, 2, 7], [1, 5, 11],
     [1, 1, 5], [2, 9, 10], [1, 6, 7], [3, 2, 3], [2, 8, 9], [3, 2, 8]]

    print(Solution().maxNumEdgesToRemove(n, edges))


